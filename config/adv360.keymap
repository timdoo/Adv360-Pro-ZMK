#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"

      //////////////////////////////////////////////////////////////////////////
          //
          // Miryoku layers and home row mods (ported from my QMK endgame)
          // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
          // - https://github.com/urob/zmk-config#timeless-homerow-mods
          //
          //////////////////////////////////////////////////////////////////////////

          //
          // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
          // for the pinky, ring, and middle fingers (which are assigned to Super,
          // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
          //
          #define HOMEY_HOLDING_TYPE "tap-preferred"

          //
          // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
          // home row mod keys in order to send their modifiers to the computer
          // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
          //
          #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER

          //
          // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
          // after typing before you can use home row mods again.  It prevents
          // unintended activation of home row mods when you're actively typing.
          //
          #define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms

          //
          // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
          // after tapping a key to hold it again in order to make it auto-repeat.
          //
          #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

          //
          // SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
          // for index fingers (which Miryoku assigns to Shift) on home row keys.
          //
          // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
          // allows faster activation of the Shift modifier (without having to wait
          // for the modified key to be released as the "balanced" flavor requires).
          // Typing streaks and the `hold-trigger-on-release` setting are disabled
          // for the index fingers so as not to hinder their speed and dexterity.
          //
          #define SHIFT_HOLDING_TYPE "tap-preferred"

          //
          // SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
          // index finger keys in order to send their modifiers to the computer
          // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
          //
          // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
          // fingers toward the index fingers when activating multiple modifiers
          // because `hold-trigger-on-release` is disabled for the index fingers.
          // Otherwise, you may be surprised that the index fingers' modifier is
          // sent immediately without the rest of your multi-mod chord when you
          // perform outward rolls from your index fingers toward your pinkies.
          //
          #define SHIFT_HOLDING_TIME 170

          //
          // SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
          // after typing before you can use home row mods again.  It prevents
          // unintended activation of home row mods when you're actively typing.
          //
          #define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms

          //
          // SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
          // after tapping a key to hold it again in order to make it auto-repeat.
          //
          #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

          //
          // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
          // for the thumbs (which are assigned to 6 layers in the Miryoku system).
          //
          // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
          // activation for the symbol layer (if the tapped symbol key is released
          // while the thumb layer key is still held down) for quicker programming.
          //
          #define THUMB_HOLDING_TYPE "balanced"

          //
          // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
          // a thumb key to activate a layer.  Shorter holds are treated as taps.
          //
          #define THUMB_HOLDING_TIME 200

          //
          // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
          // after tapping a key to hold it again in order to make it auto-repeat.
          //
          #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

          //
          // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
          // the space thumb key to activate.  Shorter holds are treated as taps.
          //
          #define SPACE_HOLDING_TIME 170

          //
          // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
          // after tapping a key to hold it again in order to make it auto-repeat.
          //
          #define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat

          //
          // Glove80 key positions index for positional hold-tap
          // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
          // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
          //
          // |------------------------|------------------------|
          // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
          // |                        |                        |
          // |  0  1  2  3  4         |          5  6  7  8  9 |
          // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
          // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
          // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
          // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
          // | 64 65 66 67 68         |         75 76 77 78 79 |
          // |                69 52   |   57 74                |
          // |                 70 53  |  56 73                 |
          // |                  71 54 | 55 72                  |
          // |------------------------|------------------------|
          //
          #define LEFT_HAND_KEYS      \
                  0  1  2  3  4  5  6 \
                 14 15 16 17 18 19 20 \
                 28 29 30 31 32 33 34 \
                 46 47 48 49 50 51    \
                 60 61 62 63 64
          #define RIGHT_HAND_KEYS     \
                                           7  8  9 10 11 12 13 \
                                          21 22 23 24 25 26 27 \
                                          39 40 41 42 43 44 45 \
                                             54 55 56 57 58 59 \
                                                71 72 73 74 75
          #define THUMB_KEYS          \
                              35 36      37 38           \
                              52         53              \
                              65 66 67   68 69 70

          //
          // Home row mod-tap keys for all except index fingers
          //
          homey_left: miryoku_home_row_mods_left_hand {
              compatible = "zmk,behavior-hold-tap";
              label = "HOME_ROW_MODS_LEFT_HAND";
              flavor = HOMEY_HOLDING_TYPE;
              hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
              hold-trigger-on-release; // wait for other home row mods
              tapping-term-ms = <HOMEY_HOLDING_TIME>;
              quick-tap-ms = <HOMEY_REPEAT_DECAY>;
              require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
              #binding-cells = <2>;
              bindings = <&kp>, <&kp>;
          };
          homey_right: miryoku_home_row_mods_right_hand {
              compatible = "zmk,behavior-hold-tap";
              label = "HOME_ROW_MODS_RIGHT_HAND";
              flavor = HOMEY_HOLDING_TYPE;
              hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
              hold-trigger-on-release; // wait for other home row mods
              tapping-term-ms = <HOMEY_HOLDING_TIME>;
              quick-tap-ms = <HOMEY_REPEAT_DECAY>;
              require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
              #binding-cells = <2>;
              bindings = <&kp>, <&kp>;
          };

          //
          // Special home row mod-tap keys for the index fingers
          //
          shift_left: miryoku_home_row_mods_left_shift_shift {
              compatible = "zmk,behavior-hold-tap";
              label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
              flavor = SHIFT_HOLDING_TYPE;
              hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
              //hold-trigger-on-release; // don't wait for other mods
              tapping-term-ms = <SHIFT_HOLDING_TIME>;
              quick-tap-ms = <SHIFT_REPEAT_DECAY>;
              require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
              #binding-cells = <2>;
              bindings = <&kp>, <&kp>;
          };
          shift_right: miryoku_home_row_mods_right_shift_shift {
              compatible = "zmk,behavior-hold-tap";
              label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
              flavor = SHIFT_HOLDING_TYPE;
              hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
              //hold-trigger-on-release; // don't wait for other mods
              tapping-term-ms = <SHIFT_HOLDING_TIME>;
              quick-tap-ms = <SHIFT_REPEAT_DECAY>;
              require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
              #binding-cells = <2>;
              bindings = <&kp>, <&kp>;
          };

          //
          // Thumb cluster hold-tap keys for Miryoku layers
          //
          thumb: miryoku_thumb_layer {
              compatible = "zmk,behavior-hold-tap";
              label = "MIRYOKU_THUMB_LAYER";
              flavor = THUMB_HOLDING_TYPE;
              tapping-term-ms = <THUMB_HOLDING_TIME>;
              quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
              //global-quick-tap; // no typing streak
              //retro-tap; // don't allow slow (hold-like) taps
              #binding-cells = <2>;
              bindings = <&mo>, <&kp>;
          };
          space: miryoku_thumb_layer_spacebar {
              compatible = "zmk,behavior-hold-tap";
              label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
              flavor = THUMB_HOLDING_TYPE;
              tapping-term-ms = <SPACE_HOLDING_TIME>;
              quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
              //global-quick-tap; // no typing streak
              retro-tap; // allow slow (hold-like) taps
              #binding-cells = <2>;
              bindings = <&mo>, <&kp>;
          };

      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
    #ifndef UNICODE_TARGET_OS
    //#define UNICODE_TARGET_OS 1 // linux
    #define UNICODE_TARGET_OS 2 // macos
    //#define UNICODE_TARGET_OS 3 // windows
    #endif

    //
    // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
    // between keystrokes while inputting the Unicode codepoint shortcut.
    //
    #ifndef UNICODE_TAP_DELAY
    #define UNICODE_TAP_DELAY 1
    #endif

    //
    // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
    // between emitting Unicode codepoints in multi-codepoint characters.
    //
    #ifndef UNICODE_SEQ_DELAY
    #define UNICODE_SEQ_DELAY 10
    #endif

    #define UNICODE(name, ...) \
        ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
        )

      /* ü */ UNICODE(world_u_diaeresis_lower,
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp C>, <&macro_release &kp LALT>
      #endif
      )

      /* Ü */ UNICODE(world_u_diaeresis_upper,
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp C>, <&macro_release &kp LALT>
      #endif
      )

      /* ö */ UNICODE(world_o_diaeresis_lower,
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )

      /* Ö */ UNICODE(world_o_diaeresis_upper,
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )

      /* ä */ UNICODE(world_a_diaeresis_lower,
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )

      /* Ä */ UNICODE(world_a_diaeresis_upper,
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )

    /* Ä */ UNICODE(world_a_scharfes_s,
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )

    world_a_diaeresis: world_a_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };

      world_o_diaeresis: world_o_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };

      world_u_diaeresis: world_u_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };


      super_geheim: super_geheim {
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings = <&macro_tap &kp N1 &kp N2 &kp N7 &kp C &kp H &kp HASH &kp U>,
                     <&macro_press &kp LSHFT>, <&macro_tap &kp F>, <&macro_release &kp LSHFT>,
                     <&macro_tap &kp P>,
                     <&macro_press &kp LSHFT>, <&macro_tap &kp U>, <&macro_release &kp LSHFT>,
                    <&macro_tap &kp N7 &kp EXCLAMATION>;
    };

    };
};

/ {
    keymap {
        compatible = "zmk,keymap";


        Base {
            bindings = <
&trans  &trans              &trans               &trans              &trans  &trans  &trans                                               &trans     &trans  &trans  &trans     &trans      &trans         &trans
&trans  &kp Q               &kp W                &kp E               &kp R   &kp T   &trans                                               &trans     &kp Y   &kp U   &kp I      &kp O       &kp P          &trans
&trans  &homey_left LALT A  &homey_left LCTRL S  &homey_left LGUI D  &kp F   &kp G   &trans   &kp LC(TAB)  &trans      &super_geheim  &kp TAB    &trans     &kp H   &kp J   &homey_right LGUI K      &homey_right LCTRL L       &homey_right LALT SEMICOLON  &trans
&trans  &kp Z               &kp X                &kp C               &kp V   &kp B                         &trans      &trans                        &kp N   &kp M   &kp COMMA  &kp PERIOD  &kp SLASH      &trans
&mo 4   &trans              &trans               &trans              &trans           &thumb 2 ESC  &kp LSHFT    &trans      &trans  &kp SPACE   &thumb 1 ENTER          &trans  &trans     &trans      &trans         &trans
            >;
        };

        Sonderzeichen {
            bindings = <
&trans  &trans                &trans             &trans          &trans          &trans                 &trans                                      &trans  &trans         &trans             &trans          &trans         &trans        &trans
&trans  &kp EXCLAMATION       &kp AT_SIGN        &kp UP_ARROW    &kp DOLLAR      &kp PERCENT            &trans                                      &trans  &kp CARET      &kp SINGLE_QUOTE   &kp EQUAL       &kp PIPE       &trans        &trans
&trans  &kp LEFT_PARENTHESIS  &kp LEFT           &kp DOWN_ARROW  &kp RIGHT       &kp RIGHT_PARENTHESIS  &trans  &trans  &trans      &trans  &trans  &trans  &kp AMPERSAND  &kp DOUBLE_QUOTES  &kp MINUS       &kp PLUS       &kp ASTERISK  &trans
&trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp HASH        &kp LEFT_BRACE  &kp RIGHT_BRACE                                &trans      &trans                  &kp TILDE      &kp GRAVE          &kp UNDERSCORE  &kp BACKSLASH  &trans        &trans
&trans  &trans                &trans             &trans          &trans                                 &mo 3   &trans  &trans      &trans  &trans  &trans                 &trans             &trans          &trans         &trans        &trans
            >;
        };

        Numbers {
            bindings = <
&trans  &trans        &trans        &trans         &trans        &trans        &trans                                      &trans  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp NUMBER_5  &trans                                      &trans  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans
&trans  &trans        &trans        &kp BACKSPACE  &trans        &kp LSHIFT    &trans  &trans  &trans      &trans  &trans  &trans  &world_a_diaeresis         &world_u_diaeresis         &world_o_diaeresis   &world_a_scharfes_s        &trans        &trans
&trans  &trans        &trans        &trans         &trans        &trans                        &trans      &trans                  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans         &trans                      &trans  &trans  &trans      &trans  &trans  &mo 3                 &trans        &trans        &trans        &trans        &trans
            >;
        };

        Intellij {
            bindings = <
&trans  &trans         &trans      &trans            &trans         &trans         &trans                                      &trans  &trans  &trans  &trans  &trans  &trans            &trans
&trans  &trans         &kp F2      &kp LG(NUMBER_4)  &kp LS(F6)     &kp LG(LS(T))  &trans                                      &trans  &trans  &trans  &trans  &trans  &kp LG(NUMBER_1)  &trans
&trans  &kp LS(LC(O))  &kp LA(F7)  &kp LG(NUMBER_5)  &kp LA(LG(L))  &trans         &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans
&trans  &trans         &trans      &trans            &trans         &trans                         &trans      &trans                  &trans  &trans  &trans  &trans  &trans            &trans
&trans  &trans         &trans      &trans            &trans                        &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans            &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
